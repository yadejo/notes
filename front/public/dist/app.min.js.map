{"version":3,"sources":["/public/dist/app/app.ts","/public/dist/notes/notes.ts","/public/dist/login/login.ts","/public/dist/register/register.ts","/public/dist/shared/authService.ts","/public/dist/templates.ts"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","state","url","template","authenticate","otherwise","run","$rootScope","$state","authService","$on","event","toState","toParams","fromState","fromParams","isLoggedIn","transitionTo","preventDefault","app","notes","notes_1","NotesCtrl","$scope","notesService","$http","_this","this","onCheck","note","noteContainer","setTimeout","isComplete","$apply","filter","n","id","addNote","newNote","content","push","Note","length","addContainer","newContainerName","container","NoteContainer","removeContainer","confirm","Array","$inject","NotesService","name","directive","templateUrl","controller","controllerAs","factory","login","LoginCtrl","register","RegisterCtrl","registerService","RegisterService","username","password","console","log","shared","AuthService","$q","localStorageService","toastr","serviceBase","loggedIn","data","deferred","defer","post","headers","Content-Type","success","response","set","token","access_token","resolve","error","logout","promise","remove","instance","$templateCache","put"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\nangular.module('notesApp', [\r\n    'app.login',\r\n    'app.register',\r\n    'app.templates',\r\n    'app.notes',\r\n    'ui.router',\r\n    'app.shared',\r\n    'angular-loading-bar',\r\n    'ngAnimate'\r\n]).config(function($stateProvider, $urlRouterProvider){\r\n    $stateProvider\r\n        .state(\"notes\", {\r\n            url: \"/notes\",\r\n            template: '<notes></notes>',\r\n            authenticate:true\r\n        })\r\n        .state(\"login\", {\r\n            url: \"/login\",\r\n            template: '<login></login>',\r\n            authenticate:false\r\n        })\r\n        .state(\"register\", {\r\n            url:\"/register\",\r\n            template: '<register></register>',\r\n            authenticate:false\r\n        });\r\n\r\n        $urlRouterProvider.otherwise(\"/login\");\r\n\r\n}).run(function($rootScope, $state, authService){\r\n    $rootScope.$on(\"$stateChangeStart\", function(event, toState, toParams, fromState, fromParams){\r\n        \r\n            if(toState.authenticate && !authService.isLoggedIn()){\r\n                $state.transitionTo(\"login\");\r\n                event.preventDefault();\r\n            }      \r\n\r\n    });\r\n});","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.notes {\n\n    export interface INotesCtrl { }\n\n    export interface INotesScope extends ng.IScope {\n        notes: Array<NoteContainer>;\n        newContainerName: string;\n    }\n\n    export class NotesCtrl implements INotesCtrl {\n        static $inject = [\"$scope\", \"notesService\", \"$http\"];\n\n        constructor(\n            public $scope: INotesScope,\n            public notesService: NotesService,\n            public $http: ng.IHttpService\n        ) {\n            //var notes = notesService.loadNotes();\n            var notes = new Array<NoteContainer>();\n            $scope.notes = notes;\n        }\n\n        onCheck = (note: Note, noteContainer: NoteContainer) => {\n            setTimeout(() => {\n                if (note.isComplete) {\n                    this.$scope.$apply(function () {\n                        noteContainer.notes = noteContainer.notes.filter((n) => { return n.id != note.id });\n                    });\n                }\n            }, 3000)\n\n\n        }\n\n        addNote = (noteContainer: NoteContainer) => {\n            if (noteContainer.newNote.content) {\n                noteContainer.notes.push(noteContainer.newNote)\n                noteContainer.newNote = new Note(noteContainer.notes.length, \"\");\n            }\n\n        }\n\n        addContainer = () => {\n            if (this.$scope.newContainerName) {\n                var container = new NoteContainer(this.$scope.notes.length, this.$scope.newContainerName);\n                this.$scope.notes.push(container);\n                this.$scope.newContainerName = \"\";\n            }\n        }\n\n        removeContainer = (noteContainer: NoteContainer) => {\n            if (noteContainer.notes.length != 0) {\n                if (confirm(\"Do you really want to delete this container\")) {\n                    this.$scope.notes = this.$scope.notes.filter((n) => { return n.id != noteContainer.id });\n\n                }\n            }\n            else {\n                this.$scope.notes = this.$scope.notes.filter((n) => { return n.id != noteContainer.id });\n            }\n        }\n    }\n\n    export interface INotesService {\n        // loadNotes(): Array<NoteContainer>;\n    }\n    export class NotesService implements INotesService {\n        \n    }\n\n    class NoteContainer {\n        id: number;\n        name: string;\n        notes: Array<Note>;\n        newNote: Note;\n\n        constructor(id: number, name: string) {\n            this.id = id;\n            this.name = name;\n            this.newNote = new Note(0, \"\");\n            this.notes = new Array<Note>();\n        }\n\n    }\n\n    class Note {\n        id: number;\n        isComplete: boolean;\n        content: string;\n\n        constructor(id: number, content: string, isComplete: boolean = false) {\n            this.id = id;\n            this.content = content;\n            this.isComplete = isComplete;\n        }\n    }\n\n    angular\n        .module('app.notes', [])\n        .directive(\"notes\", function (): ng.IDirective {\n            return {\n                templateUrl: 'app-templates/notes/notes.html',\n                controller: NotesCtrl,\n                controllerAs: 'notesVM'\n            };\n        })\n        .controller(\"notesCtrl\", NotesCtrl)\n        .factory(\"notesService\", [() => new app.notes.NotesService()]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.login {\n\n    'use strict';\n\n    export interface ILoginCtrl {}\n\n    export class LoginCtrl implements ILoginCtrl {\n        static $inject = [\"$scope\", \"authService\"];\n        constructor(\n            public $scope: ng.IScope,\n            public authService: any\n        ){}\n    }\n\n    angular\n        .module('app.login', [])\n        .directive(\"login\", function(): ng.IDirective {\n            return {\n                templateUrl: 'app-templates/login/login.html',\n                controller:  LoginCtrl,\n                controllerAs: 'loginVM'\n            };\n        })\n        .controller(\"loginCtrl\", LoginCtrl);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\nmodule app.register {\r\n\r\n    'use strict';\r\n\r\n    export interface IRegisterCtrl {}\r\n\r\n    export class RegisterCtrl implements IRegisterCtrl {\r\n        static $inject = [\"$scope\", \"registerService\"];\r\n        constructor(\r\n            public $scope: ng.IScope,\r\n            public registerService: RegisterService\r\n        ){}\r\n    }\r\n\r\n    export interface IRegisterService {\r\n        register(username: string, password: string): void;\r\n    }\r\n    export class RegisterService implements IRegisterService {\r\n        public register = (username: string, password:string) =>{\r\n            console.log(username + \" \" + password);\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('app.register', [])\r\n        .directive(\"register\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'app-templates/register/register.html',\r\n                controller:  RegisterCtrl,\r\n                controllerAs: 'registerVM'\r\n            };\r\n        })\r\n        .controller(\"registerCtrl\", RegisterCtrl)\r\n        .factory(\"registerService\", [() => new app.register.RegisterService()]);\r\n}\r\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n\nmodule app.shared{\n\n    export interface IAuthService{\n        isLoggedIn(): boolean;\n        login(username: string, password: string): ng.IPromise<{}>;\n        logout(): void;\n    }\n\n    export class AuthService implements IAuthService{\n        private serviceBase: string = \"http://localhost:56361/\"\n        loggedIn: boolean = false;\n    \n\n        static $inject = [\"$http\", \"$q\", \"localStorageService\"];\n\n        constructor(public $http: ng.IHttpService, public $q: ng.IQService, \n            public localStorageService: any, public toastr: any){\n\n        }\n\n        isLoggedIn = () =>{\n            return this.loggedIn;\n        }   \n\n        login = (username: string, password: string) => {\n            var data = \"grant_type=password&username=\"+username+\"&password=\" + password;\n\n            var deferred = this.$q.defer();\n            \n            this.$http.post(this.serviceBase + 'token', data, {headers: {'Content-Type': 'application/x-www-form-urlencoded'}})\n                .success((response:any): void =>{\n                    //hier\n                    this.loggedIn = true;\n                    this.localStorageService.set('authorizationData', {token: response.access_token})\n\n                    deferred.resolve(response);\n                }).error((response:any) : void=>{\n                    if(!response){\n                        this.toastr.error(\"Server must be down...\", \"Error\");\n                    }\n                    console.log(response);\n                    this.logout();\n                });\n             \n             return deferred.promise;\n        }\n\n        logout = () =>{\n            this.localStorageService.remove('authorizationData');\n\n            this.loggedIn = false;\n        }\n\n        static factory(){\n            var instance = ($http: ng.IHttpService, $q: ng.IQService, localStorageService: any, toastr: any) => new AuthService($http, $q, localStorageService, toastr);\n\n            return instance;\n        }\n             \n    }\n\nangular\n        .module('app.shared', ['LocalStorageModule', 'toastr'])\n        .factory(\"authService\", AuthService.factory());\n}",null]}