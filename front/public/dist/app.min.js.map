{"version":3,"sources":["app/app.ts","login/login.ts","notes/notes.ts","register/register.ts","shared/authInterceptorService.ts","shared/authService.ts","templates.ts"],"names":["myApp","angular","module","config","$stateProvider","$urlRouterProvider","$httpProvider","state","url","template","authenticate","params","email","otherwise","interceptors","push","run","$rootScope","$state","authService","$on","event","toState","toParams","fromState","fromParams","name","isLoggedIn","transitionTo","preventDefault","MainCtrl","$scope","this","$inject","controller","app","login","LoginCtrl","username","directive","templateUrl","controllerAs","notes","notes_1","NotesCtrl","notesService","$http","_this","onCheck","note","noteContainer","setTimeout","IsComplete","removeNote","ID","$apply","Notes","filter","n","addNote","newNote","Content","then","response","data","Note","addContainer","newContainerName","container","NoteContainer","Name","removeContainer","length","confirm","loadNotes","JSON","stringify","parse","console","log","NotesService","toastr","apiBase","get","post","success","error","containerId","content","noteId","factory","instance","Array","register","RegisterCtrl","executeValidateEmail","registration","Email","validMail","validateEmail","showMailValidation","validate","pw","Password","pwC","ConfirmPassword","canRegister","re","test","$watch","intercept","AuthInterceptorService","$q","localStorageService","request","headers","authData","Authorization","token","responseError","rejection","status","reject","shared","AuthService","serviceBase","loggedIn","userName","password","deferred","defer","Content-Type","set","access_token","go","resolve","error_description","logout","promise","modelState","ModelState","errorArr","Object","keys","remove","$templateCache","put"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\nvar myApp = angular.module('notesApp', [\r\n    'app.login',\r\n    'app.register',\r\n    'app.templates',\r\n    'app.notes',\r\n    'app.intercept',\r\n    'ui.router',\r\n    'app.shared',\r\n    'angular-loading-bar',\r\n    'ngAnimate'\r\n]).config(function($stateProvider, $urlRouterProvider, $httpProvider){\r\n    $stateProvider\r\n        .state(\"notes\", {\r\n            url: \"/notes\",\r\n            template: '<notes></notes>',\r\n            authenticate:true\r\n        })\r\n        .state(\"login\", {\r\n            url: \"/login\",\r\n            template: '<login></login>',\r\n            authenticate:false,\r\n            params:{\r\n                email:\"\"\r\n            }\r\n        })\r\n        .state(\"register\", {\r\n            url:\"/register\",\r\n            template: '<register></register>',\r\n            authenticate:false\r\n        });\r\n\r\n        $urlRouterProvider.otherwise(\"/login\");\r\n        $httpProvider.interceptors.push(\"authInterceptorService\");\r\n\r\n\r\n}).run(function($rootScope, $state, authService){\r\n    $rootScope.$on(\"$stateChangeStart\", function(event, toState, toParams, fromState, fromParams){\r\n\r\n            if((toState.name ===\"register\" || toState.name === \"login\" )&& authService.isLoggedIn()){\r\n                $state.transitionTo(\"notes\");\r\n                event.preventDefault();\r\n            }\r\n        \r\n            if(toState.authenticate && !authService.isLoggedIn()){\r\n                $state.transitionTo(\"login\");\r\n                event.preventDefault();\r\n            }      \r\n\r\n    });\r\n});\r\n\r\n\r\n class MainCtrl  {\r\n        static $inject = [\"$scope\", \"authService\"];\r\n        constructor(\r\n            public $scope: ng.IScope,\r\n            public authService: any\r\n        ){}\r\n\r\n    }\r\n\r\n     myApp\r\n         .controller(\"mainCtrl\", MainCtrl);","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\nmodule app.login {\r\n\r\n    'use strict';\r\n\r\n    export interface ILoginCtrl {}\r\n\r\n    export interface ILoginScope extends ng.IScope{\r\n        username: string;\r\n    }\r\n\r\n    export class LoginCtrl implements ILoginCtrl {\r\n        static $inject = [\"$scope\", \"authService\", \"$state\"];\r\n        constructor(\r\n            public $scope: ILoginScope,\r\n            public authService: any,\r\n            public $state: any\r\n        ){\r\n            var email: string = $state.params.email;\r\n\r\n            if(email){\r\n                $scope.username = email;\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('app.login', [])\r\n        .directive(\"login\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'app-templates/login/login.html',\r\n                controller:  LoginCtrl,\r\n                controllerAs: 'loginVM'\r\n            };\r\n        })\r\n        .controller(\"loginCtrl\", LoginCtrl);\r\n}\r\n","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\nmodule app.notes {\r\n\r\n    export interface INotesCtrl { }\r\n\r\n    export interface INotesScope extends ng.IScope {\r\n        notes: Array<INoteContainer>;\r\n        newContainerName: string;\r\n    }\r\n\r\n    export class NotesCtrl implements INotesCtrl {\r\n        static $inject = [\"$scope\", \"notesService\", \"$http\"];\r\n\r\n        constructor(\r\n            public $scope: INotesScope,\r\n            public notesService: NotesService,\r\n            public $http: ng.IHttpService\r\n        ) {\r\n            var notes = notesService.loadNotes().then((response:any)=>{\r\n                var data = JSON.stringify(response.data);\r\n                \r\n                let notes: Array<INoteContainer> = JSON.parse(data);\r\n\r\n                $scope.notes = notes;\r\n                console.log(notes);\r\n\r\n                console.log($scope.notes);\r\n\r\n            });\r\n        }\r\n\r\n        onCheck = (note: Note, noteContainer: NoteContainer) => {\r\n            setTimeout(() => {\r\n                if (note.IsComplete) {                    \r\n                    this.notesService.removeNote(noteContainer.ID, note.ID);\r\n                    this.$scope.$apply(function () {\r\n                        \r\n                        noteContainer.Notes = noteContainer.Notes.filter((n) => { return n.ID != note.ID });\r\n                    });\r\n                }\r\n            }, 3000)\r\n\r\n\r\n        }\r\n\r\n        addNote = (noteContainer: NoteContainer) => {\r\n            if(!noteContainer.newNote) return;\r\n            if (noteContainer.newNote.Content) {\r\n                this.notesService.addNote(noteContainer.ID, noteContainer.newNote.Content).then((response:any) =>{\r\n                    \r\n                noteContainer.newNote.ID = response.data;\r\n                noteContainer.Notes.push(noteContainer.newNote)\r\n                noteContainer.newNote = new Note();\r\n                });\r\n\r\n                \r\n            }\r\n\r\n        }\r\n\r\n        addContainer = () => {\r\n            if (this.$scope.newContainerName) {             \r\n                this.notesService.addContainer(this.$scope.newContainerName).then((response:any) => {\r\n                    var container = new NoteContainer()\r\n                    container.ID = response.data;\r\n                    container.Name = this.$scope.newContainerName;\r\n\r\n                    this.$scope.notes.push(container);\r\n                    this.$scope.newContainerName = \"\";\r\n                });\r\n               \r\n            }\r\n        }\r\n\r\n        removeContainer = (noteContainer: NoteContainer) => {\r\n            if (noteContainer.Notes.length != 0) {\r\n                if (confirm(\"Do you really want to delete this container\")) {\r\n                    this.notesService.removeContainer(noteContainer.ID);\r\n                    this.$scope.notes = this.$scope.notes.filter((n) => { return n.ID != noteContainer.ID });\r\n\r\n                }\r\n            }\r\n            else {\r\n                this.notesService.removeContainer(noteContainer.ID);\r\n                this.$scope.notes = this.$scope.notes.filter((n) => { return n.ID != noteContainer.ID });\r\n            }\r\n        }\r\n    } \r\n\r\n    export interface INotesService {\r\n        loadNotes();\r\n        addContainer(name : string) : number;\r\n    }\r\n    export class NotesService  {\r\n\r\n        apiBase : string =\"http://notes.zawada.be/\"\r\n\r\n        constructor(public $http: ng.IHttpService, public toastr: any){\r\n\r\n        }\r\n\r\n        loadNotes= () => {\r\n            \r\n             return this.$http.get(this.apiBase + \"api/note\", null);\r\n        \r\n        }\r\n\r\n        addContainer = (name: string) =>{\r\n            return this.$http.post(this.apiBase + \"api/note?name=\" + name, null).success((response:any)=>{\r\n                return response;\r\n            }).error((response:any)=>{\r\n                this.toastr.error(\"Container was not created\", \"Error\");\r\n            });\r\n        }\r\n\r\n        addNote = (containerId: number, content: string) =>{\r\n            return this.$http.post(this.apiBase + \"api/note/\" + containerId + \"?todo=\" + content, null).success((response:any)=>{\r\n                return response;\r\n            }).error((response:any)=>{\r\n                this.toastr.error(\"Container was not created\", \"Error\");\r\n            });\r\n        }\r\n\r\n        removeNote = (containerId: number, noteId:number)=>{\r\n            this.$http.delete(this.apiBase + \"api/note/\" + containerId + \"/\" + noteId, null);\r\n        }\r\n\r\n        removeContainer = (containerId : number) =>{\r\n            this.$http.delete(this.apiBase + \"api/note/\" + containerId, null).then((response:any)=>{\r\n                console.log(response);\r\n            })\r\n        }\r\n\r\n\r\n        static factory(){\r\n            var instance = ($http: ng.IHttpService, toastr: any) => new NotesService($http, toastr);\r\n\r\n            return instance;\r\n        }\r\n    }\r\n\r\n    class NoteContainer implements INoteContainer{\r\n        ID: number;\r\n        Name: string;\r\n        Notes: Array<Note>;\r\n        newNote: Note;\r\n\r\n        constructor(){\r\n            this.Notes = new Array<Note>();\r\n            this.newNote = new Note();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    interface INoteContainer{\r\n        ID:number;\r\n        Name:string;\r\n        Notes: Array<INote>;        \r\n    }\r\n\r\n    interface INote{\r\n        ID:number;\r\n        IsComplete:boolean;\r\n        Content:string;\r\n    }\r\n\r\n    class Note implements INote{\r\n        ID: number;\r\n        IsComplete: boolean;\r\n        Content: string;\r\n    }\r\n\r\n    angular\r\n        .module('app.notes', ['toastr'])\r\n        .directive(\"notes\", function (): ng.IDirective {\r\n            return {\r\n                templateUrl: 'app-templates/notes/notes.html',\r\n                controller: NotesCtrl,\r\n                controllerAs: 'notesVM'\r\n            };\r\n        })\r\n        .controller(\"notesCtrl\", NotesCtrl)\r\n        .factory(\"notesService\", NotesService.factory());\r\n}\r\n","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\n// import {Registration} from '../models/Registration';\r\n\r\nmodule app.register {\r\n\r\n    'use strict';\r\n\r\n    export interface IRegisterCtrl {}\r\n\r\n    export interface IRegisterScope extends ng.IScope{\r\n        register(registration: any):void;\r\n        registration: any;\r\n        canRegister:boolean;\r\n        validMail:boolean;\r\n        showMailValidation: boolean;\r\n    }\r\n\r\n    export class RegisterCtrl implements IRegisterCtrl {\r\n        static $inject = [\"$scope\", \"authService\"];\r\n        constructor(\r\n            public $scope: IRegisterScope,\r\n            public authService: any\r\n        ){            \r\n            $scope.register = (registration: any) =>{\r\n                authService.register(registration);\r\n            }\r\n\r\n            $scope.$watch('registration.Password', ()=>{\r\n               this.validate();\r\n            });\r\n\r\n            $scope.$watch('registration.ConfirmPassword', ()=>{\r\n                this.validate();\r\n            })\r\n\r\n        }\r\n\r\n        executeValidateEmail = () =>{\r\n            var email: string = this.$scope.registration.Email;\r\n            \r\n            this.$scope.validMail = this.validateEmail(email);\r\n\r\n            this.$scope.showMailValidation = !this.$scope.validMail;\r\n        }\r\n\r\n        validate = () =>{\r\n            if(!this.$scope.registration) return false;\r\n\r\n            var pw: string = this.$scope.registration.Password;\r\n            var pwC:string = this.$scope.registration.ConfirmPassword;\r\n            var email: string = this.$scope.registration.Email;\r\n\r\n            this.$scope.validMail = this.validateEmail(email);\r\n\r\n            this.$scope.showMailValidation = !this.$scope.validMail;\r\n\r\n            this.$scope.canRegister = ((pw === pwC) && (pw.length >= 6) && ( this.$scope.validMail));\r\n        }\r\n\r\n        validateEmail= (email):boolean => {\r\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            return re.test(email);\r\n        }\r\n        \r\n         \r\n        \r\n    }\r\n\r\n    angular\r\n        .module('app.register', [])\r\n        .directive(\"register\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'app-templates/register/register.html',\r\n                controller:  RegisterCtrl,\r\n                controllerAs: 'registerVM'\r\n            };\r\n        });\r\n}\r\n","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\n\r\nmodule app.intercept{\r\n    export class AuthInterceptorService{\r\n\r\n        constructor(public $q: ng.IQService, public localStorageService: any){\r\n\r\n        }\r\n\r\n        public request = (config:any) =>{\r\n            config.headers = config.headers || {};\r\n\r\n            var authData = this.localStorageService.get('authorizationData');\r\n\r\n            if(authData){\r\n                config.headers.Authorization = 'Bearer ' + authData.token;\r\n            }\r\n\r\n            return config;\r\n        }\r\n\r\n        public responseError = (rejection: any) =>{\r\n            if(rejection.status===401){\r\n                var authData = this.localStorageService.get('authorizationData');\r\n               console.log('nope');\r\n               if(authData){\r\n                   \r\n               }\r\n               \r\n            }\r\n            return this.$q.reject(rejection);\r\n    }\r\n\r\n\r\n        static factory(){\r\n            var instance = ($q: ng.IQService, localStorageService: any) => new AuthInterceptorService($q, localStorageService);\r\n\r\n            return instance;\r\n        }\r\n    }\r\n\r\n\r\n    angular\r\n        .module('app.intercept', ['LocalStorageModule'])\r\n        .factory(\"authInterceptorService\", AuthInterceptorService.factory());\r\n}","/// <reference path=\"../../../typings/index.d.ts\" />\r\n\r\n\r\nmodule app.shared{\r\n\r\n    export interface IAuthService{\r\n        isLoggedIn(): boolean;\r\n        login(username: string, password: string): ng.IPromise<{}>;\r\n        logout(): void;\r\n        register(registration: any): any;\r\n    }\r\n\r\n    export class AuthService implements IAuthService{\r\n        private serviceBase: string = \"http://notes.zawada.be/\"\r\n        loggedIn: boolean = false;\r\n    \r\n \r\n        static $inject = [\"$http\", \"$q\", \"localStorageService\", \"toastr\", \"$state\"];\r\n\r\n        constructor(public $http: ng.IHttpService, public $q: ng.IQService, \r\n            public localStorageService: any, public toastr: any, public $state:any){\r\n\r\n        }\r\n\r\n        isLoggedIn = () =>{\r\n           var authData = this.localStorageService.get('authorizationData');\r\n\r\n            if(authData)\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n\r\n        userName = () =>{\r\n            var authData = this.localStorageService.get('authorizationData');\r\n\r\n            if(authData){\r\n                return authData.username;\r\n            }\r\n        }   \r\n\r\n        login = (username: string, password: string) => {\r\n            var data = \"grant_type=password&username=\"+username+\"&password=\" + password;\r\n\r\n            var deferred = this.$q.defer();\r\n            \r\n            this.$http.post(this.serviceBase + 'token', data, {headers: {'Content-Type': 'application/x-www-form-urlencoded'}})\r\n                .success((response:any): void =>{\r\n                    //hier\r\n                    this.loggedIn = true;\r\n                    this.localStorageService.set('authorizationData', {token: response.access_token, username: username})\r\n\r\n                    this.$state.go(\"notes\");\r\n                    this.toastr.success(\"You were logged in\", \"Success\");\r\n                    deferred.resolve(response);\r\n                }).error((response:any) : void=>{\r\n                    if(!response){\r\n                        this.toastr.error(\"Server must be down...\", \"Error\");\r\n                    }\r\n                    else{\r\n                        this.toastr.error(response.error_description, \"Error\");\r\n                    }\r\n                    console.log(response);\r\n                    this.logout();\r\n                });\r\n             \r\n             return deferred.promise;\r\n        }\r\n\r\n        register = (registration: any) => {\r\n            this.logout();\r\n            this.$http.post(this.serviceBase + \"api/account/register\", registration, {headers: {'Content-Type': 'application/json'}}).success((response:any) : void=>{\r\n                this.toastr.success(\"Redirecting you to login...\", \"Registration successful\");\r\n                setTimeout(()=>{\r\n                    this.$state.go(\"login\", {email: registration.Email});\r\n                }, 3000)\r\n            }).error((response:any):void=>{\r\n                var modelState = response.ModelState;\r\n                var errorArr = modelState[Object.keys(modelState)[0]];\r\n                this.toastr.error(errorArr[1], \"Error\");\r\n            });\r\n        }\r\n\r\n\r\n\r\n        logout = () =>{\r\n            this.localStorageService.remove('authorizationData');\r\n\r\n            this.loggedIn = false;\r\n        }\r\n\r\n        static factory(){\r\n            var instance = ($http: ng.IHttpService, $q: ng.IQService, localStorageService: any, toastr: any, $state:any) => new AuthService($http, $q, localStorageService, toastr, $state);\r\n\r\n            return instance;\r\n        }\r\n             \r\n    }\r\n\r\nangular\r\n        .module('app.shared', ['LocalStorageModule', 'toastr'])\r\n        .factory(\"authService\", AuthService.factory());\r\n}",null]}